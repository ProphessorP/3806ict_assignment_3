#include "world.csp";

// primitive tasks for overall move task
// actions if conditions satisfied:
	// move the position of the sub
	// mark the new position as visited

// in order to move up:
// need to check if the current position is not at the boundary
	// xpos != upper boundry, which is first row in world (0)
// need to check if the next position is not an obstacle
	// world[xpos-1][ypos] != Bomb
MoveUp() = [(xpos != 0) && (world[xpos-1][ypos] != Bomb)] moveUp{xpos = xpos - 1; world[xpos][ypos] = Visited;} -> Skip;

// in order to move down:
// need to check if the current position is not at the boundary
	// xpos != lower boundry, which is last row in world (Rows - 1)
// need to check if the next position is not an obstacle
	// world[xpos+1][ypos] != Bomb
MoveDown() = [(xpos != Rows - 1) && (world[xpos+1][ypos] != Bomb)] moveDown{xpos = xpos + 1; world[xpos][ypos] = Visited;} -> Skip;

// in order to move left:
// need to check if the current position is not at the boundary
	// ypos != left boundry, which is first column in world (0)
// need to check if the next position is not an obstacle
	// world[xpos][ypos-1] != Bomb
MoveLeft() = [(ypos != 0) && (world[xpos][ypos-1] != Bomb)] moveLeft{ypos = ypos - 1; world[xpos][ypos] = Visited;} -> Skip;

// in order to move right:
// need to check if the current position is not at the boundary
	// ypos != right boundry, which is last column in world (Cols - 1)
// need to check if the next position is not an obstacle
	// world[xpos][ypos+1] != Bomb
MoveRight() = [(ypos != Cols - 1) && (world[xpos][ypos+1] != Bomb)] moveRight{ypos = ypos + 1; world[xpos][ypos] = Visited;} -> Skip;

Move() = (MoveUp() [] MoveDown() [] MoveLeft() [] MoveRight());Move();
//Move() = MoveUp() [] MoveDown() [] MoveLeft() [] MoveRight();

// primitive goal, entire area has been checked
#define goalAreaChecked (&& i:{0..Rows-1}@(&& j:{0..Cols-1}@(world[i][j] == Visited || world[i][j] == Bomb)));

#assert Move() reaches goalAreaChecked;